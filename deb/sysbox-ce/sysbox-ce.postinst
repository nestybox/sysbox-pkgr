#!/bin/bash
#
# Copyright: (C) 2019-2021 Nestybox Inc.  All rights reserved.
#

set -e

# Source debconf library.
. /usr/share/debconf/confmodule

# Dockerd default configuration dir/file.
dockerCfgDir="/etc/docker"
dockerCfgFile="${dockerCfgDir}/daemon.json"

# sysbox-fs' default mountpoint path.
sysboxfs_mountpoint="/var/lib/sysboxfs"

# UID-shifting module
shiftfs_module="shiftfs"

# Kernel's pool-size of inotify resources.
inotify_pool_size=1048576

# Default docker network parameters
bip_subnet="172.20.0.1/16"
pool_subnet="172.25.0.0/16"

# Docker config vars.
docker_network_config_changed="false"
docker_runtime_config_changed="false"

# Temp file for jq write operations.
tmpfile=$(mktemp /tmp/installer-scr.XXXXXX)
trap 'rm -f "${tmpfile}"' EXIT

# Kernel's keyring max keys limit. Increase keyring max-keys for scaling
# purposes.
#
# In debian-based distros (e.g., Ubuntu) the kernel keyring max keys limit
# is set to 200 for non-root users.  This is too low for Sysbox. For example,
# for a sys container based K8s cluster, the number of keys required is:
#
#             keys = 35 + (k8s_workers * 23) + (2 * pods)
#
# That is, a 10-node cluster would need 282 keys.
#
# In a large bare-metal machine, we expect ~100 sys containers. That would
# consume ~11K keys.  To be conservative, we set maxkeys to 20K. Note that since
# each key consumes ~70 bytes on average, the total mem consumption assuming all
# 20K keys are used is 20K * 70 = 1.4MB.
kernel_keys_maxkeys=20000
kernel_keys_maxbytes=1400000

# Increase the kernel's max PID limit to it's max value since Sysbox containers
# are often used as VM-like environments and can consume hundreds or thousands
# of PIDs each. For Sysbox deployments on K8s, we limit each pod to 16K pids via
# the CRI-O config file. For Sysbox deployments in Docker hosts, use Docker's
# "--pids-limit" option to fix this limit.
kernel_pid_max=4194304


# Creates sysbox-fs mountpoint.
function create_sysboxfs_mountpoint() {

    if [[ -d ${sysboxfs_mountpoint} ]]; then
        return
    fi

    mkdir -p ${sysboxfs_mountpoint}
    if [[ ! -d ${sysboxfs_mountpoint} ]]; then
        exit 1
    fi
}

# Ensure WSL2 kernel detected.
function is_wsl() {
    case "$(uname -r)" in
    *microsoft* ) true ;; # WSL 2
    *Microsoft* ) true ;; # WSL 1
    * ) false;;
    esac
}

# Enables the utilization of unprivileged user-namespaces.
function enable_unprivileged_userns() {
    if [ -f "/proc/sys/kernel/unprivileged_userns_clone" ]; then
        local val=$(sysctl kernel.unprivileged_userns_clone)
        if [[ "${val##* }" = 0 ]]; then
            sysctl -w kernel.unprivileged_userns_clone=1 >/dev/null 2>&1
        fi
    fi
}

# Ensure kernel's 'inotify' resources meet sysbox requirements -- default values
# in most distros are too low for decent-size scenarios.
function define_inotify_resources() {

    local val=$(sysctl fs.inotify.max_queued_events)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_queued_events=${inotify_pool_size} >/dev/null 2>&1
    fi

    local val=$(sysctl fs.inotify.max_user_watches)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_user_watches=${inotify_pool_size} >/dev/null 2>&1
    fi

    local val=$(sysctl fs.inotify.max_user_instances)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_user_instances=${inotify_pool_size} >/dev/null 2>&1
    fi
}

# Ensure kernel's 'keyring' resources meet sysbox requirements --
# default values in most distros are too low for decent-size
# scenarios. See definitions of keyring variables above for
# details.
function define_keyring_resources() {

    local val=$(sysctl kernel.keys.maxkeys)
    if [[ "${val##* }" -lt ${kernel_keys_maxkeys} ]]; then
        sysctl -w kernel.keys.maxkeys=${kernel_keys_maxkeys} >/dev/null 2>&1
    fi

    local val=$(sysctl kernel.keys.maxbytes)
    if [[ "${val##* }" -lt ${kernel_keys_maxbytes} ]]; then
        sysctl -w kernel.keys.maxbytes=${kernel_keys_maxbytes} >/dev/null 2>&1
    fi
}

# Apply a decent pid_max size.
function define_pidmax_resources() {

    local val=$(sysctl kernel.pid_max)
    if [[ "${val##* }" -lt ${kernel_pid_max} ]]; then
        sysctl -w kernel.pid_max=${kernel_pid_max} >/dev/null 2>&1
    fi
}

# Adds user/group in charge of running all sysbox components.
function add_sysbox_user() {

    if ! getent passwd | grep "^sysbox:" >/dev/null 2>&1; then
        useradd -s /bin/false sysbox
    fi
}

#
# Add sysbox runtime to docker configuration.
#
function adjust_docker_config_runtime() {

    # If no 'runtimes' key-entry is present, proceed to add one.
    if [ $(jq 'has("runtimes")' ${dockerCfgFile}) = "false" ]; then
        jq --indent 4 '. + {"runtimes": {"sysbox-runc": {"path": "/usr/bin/sysbox-runc"}}}' \
            ${dockerCfgFile} >${tmpfile} && cp ${tmpfile} ${dockerCfgFile}

        docker_runtime_config_changed="true"

    # If no 'sysbox-runc' runtime entry is present, proceed to add it.
    elif [ $(jq '.runtimes | has("sysbox-runc")' ${dockerCfgFile}) = "false" ]; then
        jq --indent 4 '.runtimes |= . + {"sysbox-runc": {"path": "/usr/bin/sysbox-runc"}}' \
            ${dockerCfgFile} >${tmpfile} && cp ${tmpfile} ${dockerCfgFile}

        docker_runtime_config_changed="true"

    # If the runtime config is complete (i.e. both 'runtimes' and 'sysbox-runc'
    # entries exist) but has the old sysbox-runc binary location, update the location.
    elif grep -q "/usr/local/sbin/sysbox-runc" ${dockerCfgFile}; then
        sed -i "s@/usr/local/sbin/sysbox-runc@/usr/bin/sysbox-runc@g" ${dockerCfgFile}
        docker_runtime_config_changed="true"
    fi

    # If the state has not been digested by docker yet, ensure that docker
    # processes it before this installation concludes.
    if [ ${docker_runtime_config_changed} = false ] &&
        command -v docker >/dev/null 2>&1 &&
        ! docker info 2>&1 | egrep -q "Runtimes:.*sysbox-runc"; then

        docker_runtime_config_changed="true"
    fi
}

#
# Returns 'true' if passed ipv4 address overlaps with any of the system local
# subnets. Return 'false' otherwise.
#
function system_local_subnet() {

    if ip route get ${1} | egrep -q "via $(ip route | awk '/default/ {print $3}')"; then
        return 1
    fi

    return 0
}

#
# Adjust docker's network configuration to avoid subnet overlapping ranges.
#
function adjust_docker_config_network() {

    local bip_host=$(echo ${bip_subnet} | cut -d'/' -f 1)
    local pool_host=$(echo $pool_subnet} | cut -d'/' -f 1)

    # If no 'bip' key-entry is present, proceed to add one.
    if [ $(jq 'has("bip")' ${dockerCfgFile}) = "false" ] ||
        [ $(jq '."bip"' ${dockerCfgFile}) = "\"\"" ]; then

        # If bip address to add overlaps with an existing local subnet, then
        # dump a log message to user and skip bip's configuration.
        if system_local_subnet ${bip_host} &&
            ! ip -4 address show dev docker0 | egrep -q "${bip_subnet}"; then
            echo -e "\nDocker bridge-ip network to configure (${bip_subnet}) overlaps" \
                "with existing system subnet. Installation process will skip this docker" \
                "network setting. Please manually configure docker's 'bip' subnet to" \
                "avoid connectivity issues.\n"
        else
            jq --arg bip ${bip_subnet} --indent 4 '. + {"bip": $bip}' ${dockerCfgFile} \
                >${tmpfile} && cp ${tmpfile} ${dockerCfgFile}

            docker_network_config_changed="true"
        fi
    fi

    # If no 'default-address-pool' is found, do add one here.
    if [ $(jq 'has("default-address-pools")' ${dockerCfgFile}) = "false" ] ||
        [ $(jq '."default-address-pools" | length' ${dockerCfgFile}) -eq "0" ]; then

        # If address-pool overlaps with an existing local subnet, then
        # dump a log message to user and skip this attribute's configuration.
        if system_local_subnet ${pool_host}; then
            echo -e "\nDocker default-address-pool to configure (${pool_subnet}) overlaps" \
                "with existing system subnet. Installation process will skip this docker" \
                "network setting. Please manually configure docker's 'default-address-pool'" \
                "subnet to avoid connectivity issues.\n"
        else
            jq --arg subnet ${pool_subnet} --indent 4 \
                '."default-address-pools"[0] |= . + {"base": $subnet, "size": 24}' ${dockerCfgFile} \
                >${tmpfile} && cp ${tmpfile} ${dockerCfgFile}

            docker_network_config_changed="true"
        fi
    fi
}

#
# Create/Modify dockerd configuration to meet Sysbox requirements.
#
function adjust_docker_config() {

    # If no dockerd default config-file exist, or if there's no content on it,
    # create one with a bare json layout.
    if [[ ! -f ${dockerCfgFile} ]] || [[ ! -s ${dockerCfgFile} ]]; then
        mkdir -p ${dockerCfgDir}
        touch ${dockerCfgFile}
        echo -e "{\n}" >${dockerCfgFile}
    fi

    adjust_docker_config_runtime

    adjust_docker_config_network

    if ! docker_running; then
        return
    fi

    # Restart docker if disruptive changes have been made.
    if [[ ${docker_network_config_changed} = "true" ]]; then

        # If existing containers are found then skip docker-restart to avoid any
        # service disruption.
        if ! docker ps -a | wc -l | egrep -q "1$"; then
            echo -e "\nDocker service was not restarted to avoid affecting existing" \
                "containers. Please remove them and restart Docker by doing:\n" \
                "\t\"docker rm \$(docker ps -a -q) -f &&" \
                "sudo systemctl restart docker\"\n"
        else
            systemctl restart docker
            return
        fi
    fi

    # If non-disruptive changes have been made to docker config, then send it a
    # sighup to have its config file getting re-parsed (no need to cold-boot).
    if [ ${docker_runtime_config_changed} = true ]; then
        kill -SIGHUP $(pidof dockerd)
    fi
}

#
# Checks if the docker engine is installed on the host
#
function docker_installed() {
    ret=$(command -v dockerd >/dev/null 2>&1)
    return $?
}

#
# Checks if the docker engine is running on the host
#
function docker_running() {
    ret=$(pidof dockerd >/dev/null 2>&1)
    return $?
}

#
# Verify if kernel-headers are properly installed and alert user otherwise.
#
function check_kernel_headers() {

    #if ! dpkg-query -W -f='${Status} ${Version}\n' linux-headers-$(uname -r) \
    if ! dpkg -s linux-headers-$(uname -r) 2>&1 | egrep -q "install ok installed"; then
        echo -e "\nThe linux kernel headers package was not found. This may be" \
            "expected by user applications running within Sysbox containers." \
            "Please install it with this command:\n" \
            "\t\"sudo apt-get install -y linux-headers-\$(uname -r)\"\n"
    fi
}

function config_sysbox() {

    # Ensure sysbox-fs' default mountpoint is created in the file-system.
    create_sysboxfs_mountpoint

    # Allows user-namespaces creation for unprivileged users. This change will
    # persist through system reboots by relying on a sysctl.d config-file to be
    # generated as part of this package's installation process.
    if is_wsl; then
        echo "WSL2 detected, enable_unprivileged_userns skipped."
    else
        enable_unprivileged_userns
    fi

    # Ensure kernel's inotify resources can meet Sysbox's scaling requirements.
    define_inotify_resources

    # Ensure kernel's keyring resources can meet Sysbox's scaling requirements.
    define_keyring_resources

    # Ensure that kernel's pid_max values are large enough to meet Sysbox's scaling
    # requirements.
    define_pidmax_resources

    # Add 'sysbox' user to host a large pool of subordinate UIDs/GIDs to be
    # shared across all system-containers. This user must match the one defined
    # in the docker configuration file.
    add_sysbox_user

    # Adjust dockerd configuration (if necessary)
    if docker_installed; then
        adjust_docker_config
    fi

    # Check for kernel-headers.
    if is_wsl; then
        echo "WSL2 detected, check_kernel_headers skipped."
    else
        check_kernel_headers
    fi
}

case "$1" in
configure)
    # Adjust system's configuration to satisfy Sysbox requirements.
    config_sysbox

    # Avoid calling exit() here to allow debhelper tools to add their
    # auto-generated code further below.
    ;;

abort-*) ;;

\
    *) ;;

esac

#DEBHELPER#
